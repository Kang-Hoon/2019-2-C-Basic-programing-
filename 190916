190916(2) 기초프로그래밍2

Relational Operator
 
Operator 	Description 
== 			(equal) Checks if the values of two operands are equal or not. If yes, then the condition becomes true. 

!= 			(not equal) Checks if the values of two operands are equal or not. If the values are not equal, then the condition becomes true. 

>			(greater than) Checks if the value of left operand is greater than the value of right operand. If yes, then the condition becomes true. 

<			(less than) Checks if the value of left operand is less than the value of right operand. If yes, then the condition becomes true. 

>=			(greater than or equal) Checks if the value of left operand is greater than or equal to the value of right operand. If yes, then the condition becomes true. 

<=			(less than or equal) Checks if the value of left operand is less than or equal to the value of right operand. If yes, then the condition becomes true. 

EX)

int a=100, b=23;
int c=0;

c=(a==b);	c=0(false) 
c=(a!=b);	c=1(true)
c=(a>b);	c=1(true)
c=(a<b);	c=0(false)
c=(a>=b);	c=1(true)
c=(a<=b);	c=0(false) 

Logical Operator

Operator 	Description 
&& 			Called Logical AND operator. If both the operands are non-zero(true), then the condition becomes true. 

||			Called Logical OR Operator. If any of the two operands is non-zero(true), then the condition becomes true. 

!			Called Logical NOT Operator. It is used to reverse the logical state of its operand. If a condition is true, then Logical NOT operator will make it false. 

EX)

int a=1, b=0;
int c;

a&&b;	false
a||b;	true
!a;		false
!b;		true

c = ((a>b) && (a!=b));
c = !(a==b);

Bitwise Operator

Operator 	Description 
&			Binary AND Operator. 

|			Binary OR Operator. 

^			Binary XOR Operator. 

~			Binary Not Operator. 

<<			Binary Left Shift Operator. 

>>			Binary Right Shift Operator. 


